{"mappings":"AA0CSA,QAAQC,QAAQ,uBAIdC,MAEX,SAA4BC,GAC1BC,QAAQC,IAAI,sBACZD,QAAQC,IAAIF,E,IAJYG,OAM1B,SAA0BC,GACxBH,QAAQC,IAAI,oBACZD,QAAQC,IAAIE,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.3;\n\n//   setTimeout(() => {\n//   if (canFulfill) {\n//     resolve(`Проміс виконався успішно, с результатом (виконан, fulfilled)`);\n//   }\n//   reject(`Проміс виконався з помилкою (відхилено, rejected)`);\n// }, 2000);\n  \n// });\n// // Виконали планіровку - відкладені виклики\n// promise\n// .then(onFulfilled)\n// .then(x => {\n//   console.log(x);\n//   return 10;\n// })\n// .then(y => {\n//   console.log(y);\n// })\n// .catch(error => console.log(error))\n// .finally(() => console.log(`В кожному випадку`));\n  \n\n\n// console.log(promise);\n\n// function onFulfilled(result) {\n//   console.log(`onFulfilled -> onFulfilled`);\n// }\n\nconst makeOrder = dish => {\n  \n  return Promise.resolve(`Ось ваше замовлення`);\n      }\n     \n\nmakeOrder(`пиріжок`).then(onMakeOrderSuccess).catch(onMakeOrderError);\n\nfunction onMakeOrderSuccess(result) {\n  console.log(`onMakeOrderSuccess`);\n  console.log(result);\n}\nfunction onMakeOrderError(error) {\n  console.log(`onMakeOrderError`);\n  console.log(error);\n}"],"names":["Promise","resolve","then","result","console","log","catch","error"],"version":3,"file":"03-promises.90365a85.js.map"}